
// Code generated by stanc v2.26.1
#include <stan/model/model_header.hpp>
namespace sparse_gp_cpc_static_induction_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 35, column 2 to column 30)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 36, column 2 to column 27)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 37, column 2 to column 16)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 42, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 42, column 2 to column 16)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 43, column 9 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 43, column 2 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 44, column 9 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 44, column 2 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 45, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 45, column 2 to column 15)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 46, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 46, column 2 to column 22)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 47, column 9 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 47, column 2 to column 22)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 48, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 48, column 12 to column 13)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 48, column 2 to column 17)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 49, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 49, column 12 to column 13)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 49, column 2 to column 17)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 50, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 50, column 2 to column 14)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 51, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 51, column 12 to column 13)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 51, column 2 to column 20)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 52, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 52, column 2 to column 15)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 53, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 53, column 2 to column 22)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 54, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 54, column 12 to column 13)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 54, column 2 to column 17)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 55, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 55, column 2 to column 14)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 57, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 57, column 12 to column 13)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 57, column 2 to column 24)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 58, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 58, column 12 to column 13)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 58, column 2 to column 27)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 60, column 2 to column 74)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 61, column 2 to column 65)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 62, column 2 to column 21)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 73, column 6 to column 55)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 72, column 7 to line 74, column 3)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 69, column 6 to column 28)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 70, column 6 to column 27)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 68, column 31 to line 71, column 3)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 68, column 7 to line 74, column 3)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 65, column 6 to column 14)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 66, column 6 to column 13)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 64, column 26 to line 67, column 3)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 64, column 2 to line 74, column 3)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 75, column 2 to column 24)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 76, column 2 to column 23)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 78, column 2 to column 20)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 79, column 2 to column 23)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 81, column 2 to column 92)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 82, column 2 to column 28)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 84, column 2 to column 20)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 85, column 2 to column 21)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 87, column 2 to column 93)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 88, column 2 to column 36)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 89, column 2 to column 41)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 91, column 2 to column 26)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 93, column 2 to column 23)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 94, column 2 to column 39)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 95, column 2 to column 39)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 96, column 2 to column 24)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 97, column 2 to column 37)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 8, column 2 to column 17)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 9, column 2 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 10, column 27 to column 28)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 10, column 2 to column 32)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 11, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 11, column 2 to column 14)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 12, column 26 to column 29)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 12, column 2 to column 31)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 13, column 16 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 13, column 2 to column 21)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 14, column 16 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 14, column 2 to column 21)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 15, column 16 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 15, column 2 to column 21)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 16, column 16 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 16, column 2 to column 21)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 17, column 2 to column 13)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 18, column 2 to column 11)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 19, column 2 to column 14)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 20, column 2 to column 27)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 21, column 2 to column 28)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 22, column 2 to column 30)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 23, column 2 to column 31)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 24, column 2 to column 8)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 25, column 27 to column 28)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 25, column 2 to column 33)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 26, column 2 to column 38)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 29, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 29, column 12 to column 13)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 29, column 2 to column 27)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 30, column 2 to column 51)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 31, column 15 to column 16)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 31, column 2 to column 18)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 32, column 2 to column 27)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 37, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 3, column 4 to column 25)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_gp_cpc_static_induction.stan', line 2, column 37 to line 4, column 3)"};


template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T1__>, -1, 1>
u_pow(const T0__& x_arg__, const T1__& theta, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__>;
  const auto& x = to_ref(x_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 107;
    return pow(x, theta);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct u_pow_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T1__>, -1, 1>
operator()(const T0__& x, const T1__& theta, std::ostream* pstream__)  const 
{
return u_pow(x, theta, pstream__);
}
};

class sparse_gp_cpc_static_induction_model final : public model_base_crtp<sparse_gp_cpc_static_induction_model> {

 private:
  int N;
  int N_y;
  Eigen::Matrix<double, -1, 1> p;
  Eigen::Matrix<double, -1, 1> X;
  std::vector<int> y;
  std::vector<int> belong_A0;
  std::vector<int> belong_A1;
  std::vector<int> belong_B0;
  std::vector<int> belong_B1;
  double theta;
  double tau;
  double jitter;
  double kernel_var_prior_mu;
  double kernel_var_prior_std;
  double kernel_length_prior_mu;
  double kernel_length_prior_std;
  int M;
  Eigen::Matrix<double, -1, 1> Xm;
  int u_model_index;
  Eigen::Matrix<double, -1, -1> diag_jitter;
  std::vector<double> X_array;
 
 public:
  ~sparse_gp_cpc_static_induction_model() { }
  
  inline std::string model_name() const final { return "sparse_gp_cpc_static_induction_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1", "stancflags = "};
  }
  
  
  sparse_gp_cpc_static_induction_model(stan::io::var_context& context__,
                                       unsigned int random_seed__ = 0,
                                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "sparse_gp_cpc_static_induction_model_namespace::sparse_gp_cpc_static_induction_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 72;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 72;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 72;
      current_statement__ = 72;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 73;
      context__.validate_dims("data initialization","N_y","int",
          context__.to_vec());
      N_y = std::numeric_limits<int>::min();
      
      current_statement__ = 73;
      N_y = context__.vals_i("N_y")[(1 - 1)];
      current_statement__ = 73;
      current_statement__ = 73;
      check_greater_or_equal(function__, "N_y", N_y, 0);
      current_statement__ = 74;
      validate_non_negative_index("p", "N", N);
      current_statement__ = 75;
      context__.validate_dims("data initialization","p","double",
          context__.to_vec(N));
      p = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(p, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> p_flat__;
        current_statement__ = 75;
        assign(p_flat__, nil_index_list(), context__.vals_r("p"),
          "assigning variable p_flat__");
        current_statement__ = 75;
        pos__ = 1;
        current_statement__ = 75;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 75;
          assign(p, cons_list(index_uni(sym1__), nil_index_list()),
            p_flat__[(pos__ - 1)], "assigning variable p");
          current_statement__ = 75;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 75;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 75;
        current_statement__ = 75;
        check_greater_or_equal(function__, "p[sym1__]", p[(sym1__ - 1)], 0);}
      current_statement__ = 75;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 75;
        current_statement__ = 75;
        check_less_or_equal(function__, "p[sym1__]", p[(sym1__ - 1)], 1);}
      current_statement__ = 76;
      validate_non_negative_index("X", "N", N);
      current_statement__ = 77;
      context__.validate_dims("data initialization","X","double",
          context__.to_vec(N));
      X = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 77;
        assign(X_flat__, nil_index_list(), context__.vals_r("X"),
          "assigning variable X_flat__");
        current_statement__ = 77;
        pos__ = 1;
        current_statement__ = 77;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 77;
          assign(X, cons_list(index_uni(sym1__), nil_index_list()),
            X_flat__[(pos__ - 1)], "assigning variable X");
          current_statement__ = 77;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 78;
      validate_non_negative_index("y", "N_y", N_y);
      current_statement__ = 79;
      context__.validate_dims("data initialization","y","int",
          context__.to_vec(N_y));
      y = std::vector<int>(N_y, std::numeric_limits<int>::min());
      
      current_statement__ = 79;
      assign(y, nil_index_list(), context__.vals_i("y"),
        "assigning variable y");
      current_statement__ = 79;
      for (int sym1__ = 1; sym1__ <= N_y; ++sym1__) {
        current_statement__ = 79;
        current_statement__ = 79;
        check_greater_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 0);}
      current_statement__ = 79;
      for (int sym1__ = 1; sym1__ <= N_y; ++sym1__) {
        current_statement__ = 79;
        current_statement__ = 79;
        check_less_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 1);}
      current_statement__ = 80;
      validate_non_negative_index("belong_A0", "N_y", N_y);
      current_statement__ = 81;
      context__.validate_dims("data initialization","belong_A0","int",
          context__.to_vec(N_y));
      belong_A0 = std::vector<int>(N_y, std::numeric_limits<int>::min());
      
      current_statement__ = 81;
      assign(belong_A0, nil_index_list(), context__.vals_i("belong_A0"),
        "assigning variable belong_A0");
      current_statement__ = 82;
      validate_non_negative_index("belong_A1", "N_y", N_y);
      current_statement__ = 83;
      context__.validate_dims("data initialization","belong_A1","int",
          context__.to_vec(N_y));
      belong_A1 = std::vector<int>(N_y, std::numeric_limits<int>::min());
      
      current_statement__ = 83;
      assign(belong_A1, nil_index_list(), context__.vals_i("belong_A1"),
        "assigning variable belong_A1");
      current_statement__ = 84;
      validate_non_negative_index("belong_B0", "N_y", N_y);
      current_statement__ = 85;
      context__.validate_dims("data initialization","belong_B0","int",
          context__.to_vec(N_y));
      belong_B0 = std::vector<int>(N_y, std::numeric_limits<int>::min());
      
      current_statement__ = 85;
      assign(belong_B0, nil_index_list(), context__.vals_i("belong_B0"),
        "assigning variable belong_B0");
      current_statement__ = 86;
      validate_non_negative_index("belong_B1", "N_y", N_y);
      current_statement__ = 87;
      context__.validate_dims("data initialization","belong_B1","int",
          context__.to_vec(N_y));
      belong_B1 = std::vector<int>(N_y, std::numeric_limits<int>::min());
      
      current_statement__ = 87;
      assign(belong_B1, nil_index_list(), context__.vals_i("belong_B1"),
        "assigning variable belong_B1");
      current_statement__ = 88;
      context__.validate_dims("data initialization","theta","double",
          context__.to_vec());
      theta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 88;
      theta = context__.vals_r("theta")[(1 - 1)];
      current_statement__ = 89;
      context__.validate_dims("data initialization","tau","double",
          context__.to_vec());
      tau = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 89;
      tau = context__.vals_r("tau")[(1 - 1)];
      current_statement__ = 90;
      context__.validate_dims("data initialization","jitter","double",
          context__.to_vec());
      jitter = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 90;
      jitter = context__.vals_r("jitter")[(1 - 1)];
      current_statement__ = 91;
      context__.validate_dims("data initialization","kernel_var_prior_mu",
          "double",context__.to_vec());
      kernel_var_prior_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 91;
      kernel_var_prior_mu = context__.vals_r("kernel_var_prior_mu")[(1 - 1)];
      current_statement__ = 92;
      context__.validate_dims("data initialization","kernel_var_prior_std",
          "double",context__.to_vec());
      kernel_var_prior_std = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 92;
      kernel_var_prior_std = context__.vals_r("kernel_var_prior_std")[
          (1 - 1)];
      current_statement__ = 93;
      context__.validate_dims("data initialization","kernel_length_prior_mu",
          "double",context__.to_vec());
      kernel_length_prior_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 93;
      kernel_length_prior_mu = context__.vals_r("kernel_length_prior_mu")[
          (1 - 1)];
      current_statement__ = 94;
      context__.validate_dims("data initialization",
          "kernel_length_prior_std","double",context__.to_vec());
      kernel_length_prior_std = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 94;
      kernel_length_prior_std = context__.vals_r("kernel_length_prior_std")[
          (1 - 1)];
      current_statement__ = 95;
      context__.validate_dims("data initialization","M","int",
          context__.to_vec());
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 95;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 96;
      validate_non_negative_index("Xm", "M", M);
      current_statement__ = 97;
      context__.validate_dims("data initialization","Xm","double",
          context__.to_vec(M));
      Xm = Eigen::Matrix<double, -1, 1>(M);
      stan::math::fill(Xm, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Xm_flat__;
        current_statement__ = 97;
        assign(Xm_flat__, nil_index_list(), context__.vals_r("Xm"),
          "assigning variable Xm_flat__");
        current_statement__ = 97;
        pos__ = 1;
        current_statement__ = 97;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 97;
          assign(Xm, cons_list(index_uni(sym1__), nil_index_list()),
            Xm_flat__[(pos__ - 1)], "assigning variable Xm");
          current_statement__ = 97;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 97;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 97;
        current_statement__ = 97;
        check_greater_or_equal(function__, "Xm[sym1__]", Xm[(sym1__ - 1)], 0);
      }
      current_statement__ = 97;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 97;
        current_statement__ = 97;
        check_less_or_equal(function__, "Xm[sym1__]", Xm[(sym1__ - 1)], 1);}
      current_statement__ = 98;
      context__.validate_dims("data initialization","u_model_index","int",
          context__.to_vec());
      u_model_index = std::numeric_limits<int>::min();
      
      current_statement__ = 98;
      u_model_index = context__.vals_i("u_model_index")[(1 - 1)];
      current_statement__ = 98;
      current_statement__ = 98;
      check_greater_or_equal(function__, "u_model_index", u_model_index, 0);
      current_statement__ = 98;
      current_statement__ = 98;
      check_less_or_equal(function__, "u_model_index", u_model_index, 1);
      current_statement__ = 99;
      validate_non_negative_index("diag_jitter", "M", M);
      current_statement__ = 100;
      validate_non_negative_index("diag_jitter", "M", M);
      current_statement__ = 101;
      diag_jitter = Eigen::Matrix<double, -1, -1>(M, M);
      stan::math::fill(diag_jitter, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 102;
      assign(diag_jitter, nil_index_list(),
        diag_matrix(rep_vector(jitter, M)), "assigning variable diag_jitter");
      current_statement__ = 103;
      validate_non_negative_index("X_array", "N", N);
      current_statement__ = 104;
      X_array = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 105;
      assign(X_array, nil_index_list(), to_array_1d(X),
        "assigning variable X_array");
      current_statement__ = 106;
      validate_non_negative_index("eta", "M", M);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += M;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "sparse_gp_cpc_static_induction_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ kernel_length;
      kernel_length = DUMMY_VAR__;
      
      current_statement__ = 1;
      kernel_length = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        kernel_length = stan::math::lb_constrain(kernel_length, 0, lp__);
      } else {
        current_statement__ = 1;
        kernel_length = stan::math::lb_constrain(kernel_length, 0);
      }
      local_scalar_t__ kernel_var;
      kernel_var = DUMMY_VAR__;
      
      current_statement__ = 2;
      kernel_var = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        kernel_var = stan::math::lb_constrain(kernel_var, 0, lp__);
      } else {
        current_statement__ = 2;
        kernel_var = stan::math::lb_constrain(kernel_var, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> eta;
      eta = Eigen::Matrix<local_scalar_t__, -1, 1>(M);
      stan::math::fill(eta, DUMMY_VAR__);
      
      current_statement__ = 3;
      eta = in__.vector(M);
      {
        current_statement__ = 4;
        validate_non_negative_index("seu", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> seu;
        seu = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(seu, DUMMY_VAR__);
        
        current_statement__ = 6;
        validate_non_negative_index("seuA", "N_y", N_y);
        Eigen::Matrix<local_scalar_t__, -1, 1> seuA;
        seuA = Eigen::Matrix<local_scalar_t__, -1, 1>(N_y);
        stan::math::fill(seuA, DUMMY_VAR__);
        
        current_statement__ = 8;
        validate_non_negative_index("seuB", "N_y", N_y);
        Eigen::Matrix<local_scalar_t__, -1, 1> seuB;
        seuB = Eigen::Matrix<local_scalar_t__, -1, 1>(N_y);
        stan::math::fill(seuB, DUMMY_VAR__);
        
        current_statement__ = 10;
        validate_non_negative_index("Mp", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> Mp;
        Mp = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(Mp, DUMMY_VAR__);
        
        current_statement__ = 12;
        validate_non_negative_index("f_predict", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> f_predict;
        f_predict = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(f_predict, DUMMY_VAR__);
        
        current_statement__ = 14;
        validate_non_negative_index("diff_eu", "N_y", N_y);
        Eigen::Matrix<local_scalar_t__, -1, 1> diff_eu;
        diff_eu = Eigen::Matrix<local_scalar_t__, -1, 1>(N_y);
        stan::math::fill(diff_eu, DUMMY_VAR__);
        
        current_statement__ = 16;
        validate_non_negative_index("L", "M", M);
        current_statement__ = 17;
        validate_non_negative_index("L", "M", M);
        Eigen::Matrix<local_scalar_t__, -1, -1> L;
        L = Eigen::Matrix<local_scalar_t__, -1, -1>(M, M);
        stan::math::fill(L, DUMMY_VAR__);
        
        current_statement__ = 19;
        validate_non_negative_index("K", "M", M);
        current_statement__ = 20;
        validate_non_negative_index("K", "M", M);
        Eigen::Matrix<local_scalar_t__, -1, -1> K;
        K = Eigen::Matrix<local_scalar_t__, -1, -1>(M, M);
        stan::math::fill(K, DUMMY_VAR__);
        
        current_statement__ = 22;
        validate_non_negative_index("f", "M", M);
        Eigen::Matrix<local_scalar_t__, -1, 1> f;
        f = Eigen::Matrix<local_scalar_t__, -1, 1>(M);
        stan::math::fill(f, DUMMY_VAR__);
        
        current_statement__ = 24;
        validate_non_negative_index("K_mp", "M", M);
        current_statement__ = 25;
        validate_non_negative_index("K_mp", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, -1> K_mp;
        K_mp = Eigen::Matrix<local_scalar_t__, -1, -1>(M, N);
        stan::math::fill(K_mp, DUMMY_VAR__);
        
        current_statement__ = 27;
        validate_non_negative_index("Mm", "M", M);
        Eigen::Matrix<local_scalar_t__, -1, 1> Mm;
        Mm = Eigen::Matrix<local_scalar_t__, -1, 1>(M);
        stan::math::fill(Mm, DUMMY_VAR__);
        
        current_statement__ = 29;
        validate_non_negative_index("L_dot_eta", "M", M);
        Eigen::Matrix<local_scalar_t__, -1, 1> L_dot_eta;
        L_dot_eta = Eigen::Matrix<local_scalar_t__, -1, 1>(M);
        stan::math::fill(L_dot_eta, DUMMY_VAR__);
        
        current_statement__ = 31;
        validate_non_negative_index("A", "M", M);
        current_statement__ = 32;
        validate_non_negative_index("A", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, -1> A;
        A = Eigen::Matrix<local_scalar_t__, -1, -1>(M, N);
        stan::math::fill(A, DUMMY_VAR__);
        
        current_statement__ = 34;
        validate_non_negative_index("v", "M", M);
        Eigen::Matrix<local_scalar_t__, -1, 1> v;
        v = Eigen::Matrix<local_scalar_t__, -1, 1>(M);
        stan::math::fill(v, DUMMY_VAR__);
        
        current_statement__ = 36;
        validate_non_negative_index("K_factor", "M", M);
        current_statement__ = 37;
        validate_non_negative_index("K_factor", "M", M);
        Eigen::Matrix<local_scalar_t__, -1, -1> K_factor;
        K_factor = Eigen::Matrix<local_scalar_t__, -1, -1>(M, M);
        stan::math::fill(K_factor, DUMMY_VAR__);
        
        current_statement__ = 39;
        validate_non_negative_index("K_mp_factor", "M", M);
        current_statement__ = 40;
        validate_non_negative_index("K_mp_factor", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, -1> K_mp_factor;
        K_mp_factor = Eigen::Matrix<local_scalar_t__, -1, -1>(M, N);
        stan::math::fill(K_mp_factor, DUMMY_VAR__);
        
        current_statement__ = 42;
        lp_accum__.add(
          normal_lpdf<propto__>(kernel_length, kernel_length_prior_mu,
            kernel_length_prior_std));
        current_statement__ = 43;
        lp_accum__.add(
          normal_lpdf<propto__>(kernel_var, kernel_var_prior_mu,
            kernel_var_prior_std));
        current_statement__ = 44;
        lp_accum__.add(std_normal_lpdf<propto__>(eta));
        current_statement__ = 54;
        if (logical_eq(u_model_index, 0)) {
          current_statement__ = 51;
          assign(Mm, nil_index_list(), Xm, "assigning variable Mm");
          current_statement__ = 52;
          assign(Mp, nil_index_list(), X, "assigning variable Mp");
        } else {
          current_statement__ = 50;
          if (logical_eq(u_model_index, 1)) {
            current_statement__ = 47;
            assign(Mm, nil_index_list(), u_pow(Xm, theta, pstream__),
              "assigning variable Mm");
            current_statement__ = 48;
            assign(Mp, nil_index_list(), u_pow(X, theta, pstream__),
              "assigning variable Mp");
          } else {
            current_statement__ = 45;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "u_model_index incorrect";
            errmsg_stream__ << u_model_index;
            throw std::domain_error(errmsg_stream__.str());
          }
        }
        current_statement__ = 55;
        assign(Mm, nil_index_list(), u_pow(Xm, theta, pstream__),
          "assigning variable Mm");
        current_statement__ = 56;
        assign(Mp, nil_index_list(), u_pow(X, theta, pstream__),
          "assigning variable Mp");
        current_statement__ = 57;
        assign(K_factor, nil_index_list(), multiply(Mm, transpose(Mm)),
          "assigning variable K_factor");
        current_statement__ = 58;
        assign(K_mp_factor, nil_index_list(), multiply(Mm, transpose(Mp)),
          "assigning variable K_mp_factor");
        current_statement__ = 59;
        assign(K, nil_index_list(),
          add(
            elt_multiply(K_factor,
              gp_exp_quad_cov(to_array_1d(Xm), kernel_var, kernel_length)),
            diag_jitter), "assigning variable K");
        current_statement__ = 60;
        assign(L, nil_index_list(), cholesky_decompose(K),
          "assigning variable L");
        current_statement__ = 61;
        assign(L_dot_eta, nil_index_list(), multiply(L, eta),
          "assigning variable L_dot_eta");
        current_statement__ = 62;
        assign(f, nil_index_list(), add(Mm, L_dot_eta),
          "assigning variable f");
        current_statement__ = 63;
        assign(K_mp, nil_index_list(),
          elt_multiply(K_mp_factor,
            gp_exp_quad_cov(to_array_1d(Xm), X_array, kernel_var,
              kernel_length)), "assigning variable K_mp");
        current_statement__ = 64;
        assign(A, nil_index_list(), mdivide_left_tri_low(L, K_mp),
          "assigning variable A");
        current_statement__ = 65;
        assign(v, nil_index_list(), mdivide_left_tri_low(L, L_dot_eta),
          "assigning variable v");
        current_statement__ = 66;
        assign(f_predict, nil_index_list(),
          add(Mp, multiply(transpose(A), v)), "assigning variable f_predict");
        current_statement__ = 67;
        assign(seu, nil_index_list(), elt_multiply(p, f_predict),
          "assigning variable seu");
        current_statement__ = 68;
        assign(seuA, nil_index_list(),
          add(
            rvalue(seu, cons_list(index_multi(belong_A0), nil_index_list()),
              "seu"),
            rvalue(seu, cons_list(index_multi(belong_A1), nil_index_list()),
              "seu")), "assigning variable seuA");
        current_statement__ = 69;
        assign(seuB, nil_index_list(),
          add(
            rvalue(seu, cons_list(index_multi(belong_B0), nil_index_list()),
              "seu"),
            rvalue(seu, cons_list(index_multi(belong_B1), nil_index_list()),
              "seu")), "assigning variable seuB");
        current_statement__ = 70;
        assign(diff_eu, nil_index_list(), subtract(seuB, seuA),
          "assigning variable diff_eu");
        current_statement__ = 71;
        lp_accum__.add(
          bernoulli_logit_lpmf<propto__>(y, multiply(tau, diff_eu)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "sparse_gp_cpc_static_induction_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double kernel_length;
      kernel_length = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      kernel_length = in__.scalar();
      current_statement__ = 1;
      kernel_length = stan::math::lb_constrain(kernel_length, 0);
      double kernel_var;
      kernel_var = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      kernel_var = in__.scalar();
      current_statement__ = 2;
      kernel_var = stan::math::lb_constrain(kernel_var, 0);
      Eigen::Matrix<double, -1, 1> eta;
      eta = Eigen::Matrix<double, -1, 1>(M);
      stan::math::fill(eta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      eta = in__.vector(M);
      vars__.emplace_back(kernel_length);
      vars__.emplace_back(kernel_var);
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(eta[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double kernel_length;
      kernel_length = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      kernel_length = context__.vals_r("kernel_length")[(1 - 1)];
      double kernel_length_free__;
      kernel_length_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      kernel_length_free__ = stan::math::lb_free(kernel_length, 0);
      double kernel_var;
      kernel_var = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      kernel_var = context__.vals_r("kernel_var")[(1 - 1)];
      double kernel_var_free__;
      kernel_var_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      kernel_var_free__ = stan::math::lb_free(kernel_var, 0);
      Eigen::Matrix<double, -1, 1> eta;
      eta = Eigen::Matrix<double, -1, 1>(M);
      stan::math::fill(eta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> eta_flat__;
        current_statement__ = 3;
        assign(eta_flat__, nil_index_list(), context__.vals_r("eta"),
          "assigning variable eta_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 3;
          assign(eta, cons_list(index_uni(sym1__), nil_index_list()),
            eta_flat__[(pos__ - 1)], "assigning variable eta");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      vars__.emplace_back(kernel_length_free__);
      vars__.emplace_back(kernel_var_free__);
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(eta[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("kernel_length");
    names__.emplace_back("kernel_var");
    names__.emplace_back("eta");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "kernel_length");
    param_names__.emplace_back(std::string() + "kernel_var");
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "kernel_length");
    param_names__.emplace_back(std::string() + "kernel_var");
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"kernel_length\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"kernel_var\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" << M << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"kernel_length\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"kernel_var\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" << M << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}

using stan_model = sparse_gp_cpc_static_induction_model_namespace::sparse_gp_cpc_static_induction_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return sparse_gp_cpc_static_induction_model_namespace::profiles__;
}

#endif


