
// Code generated by stanc v2.26.1
#include <stan/model/model_header.hpp>
namespace gp_model_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 19, column 2 to column 30)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 20, column 2 to column 27)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 21, column 2 to column 16)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 26, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 26, column 2 to column 16)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 27, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 27, column 2 to column 23)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 28, column 9 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 28, column 2 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 29, column 9 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 29, column 2 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 30, column 9 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 30, column 2 to column 22)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 31, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 31, column 12 to column 13)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 31, column 2 to column 17)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 32, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 32, column 12 to column 13)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 32, column 2 to column 17)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 33, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 33, column 2 to column 14)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 35, column 2 to column 35)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 36, column 2 to column 32)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 37, column 2 to column 21)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 39, column 2 to column 79)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 40, column 2 to column 28)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 42, column 2 to column 17)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 44, column 2 to column 15)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 45, column 2 to column 22)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 46, column 2 to column 22)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 47, column 2 to column 24)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 48, column 2 to column 37)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 2, column 2 to column 17)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 3, column 2 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 4, column 27 to column 28)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 4, column 2 to column 32)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 5, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 5, column 2 to column 14)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 6, column 26 to column 29)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 6, column 2 to column 31)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 7, column 14 to column 17)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 7, column 2 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 8, column 14 to column 17)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 8, column 2 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 9, column 2 to column 13)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 10, column 2 to column 11)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 11, column 2 to column 14)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 12, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 12, column 2 to column 15)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 15, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 15, column 12 to column 13)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 15, column 2 to column 27)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 16, column 2 to column 51)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/gp_model.stan', line 21, column 9 to column 10)"};



class gp_model_model final : public model_base_crtp<gp_model_model> {

 private:
  int N;
  int N_y;
  Eigen::Matrix<double, -1, 1> p;
  Eigen::Matrix<double, -1, 1> x;
  std::vector<int> y;
  std::vector<int> belong0;
  std::vector<int> belong1;
  double theta;
  double tau;
  double jitter;
  Eigen::Matrix<double, -1, 1> mu;
  Eigen::Matrix<double, -1, -1> diag_jitter;
 
 public:
  ~gp_model_model() { }
  
  inline std::string model_name() const final { return "gp_model_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1", "stancflags = "};
  }
  
  
  gp_model_model(stan::io::var_context& context__,
                 unsigned int random_seed__ = 0,
                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "gp_model_model_namespace::gp_model_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 33;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 33;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 33;
      current_statement__ = 33;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 34;
      context__.validate_dims("data initialization","N_y","int",
          context__.to_vec());
      N_y = std::numeric_limits<int>::min();
      
      current_statement__ = 34;
      N_y = context__.vals_i("N_y")[(1 - 1)];
      current_statement__ = 34;
      current_statement__ = 34;
      check_greater_or_equal(function__, "N_y", N_y, 0);
      current_statement__ = 35;
      validate_non_negative_index("p", "N", N);
      current_statement__ = 36;
      context__.validate_dims("data initialization","p","double",
          context__.to_vec(N));
      p = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(p, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> p_flat__;
        current_statement__ = 36;
        assign(p_flat__, nil_index_list(), context__.vals_r("p"),
          "assigning variable p_flat__");
        current_statement__ = 36;
        pos__ = 1;
        current_statement__ = 36;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 36;
          assign(p, cons_list(index_uni(sym1__), nil_index_list()),
            p_flat__[(pos__ - 1)], "assigning variable p");
          current_statement__ = 36;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 36;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 36;
        current_statement__ = 36;
        check_greater_or_equal(function__, "p[sym1__]", p[(sym1__ - 1)], 0);}
      current_statement__ = 36;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 36;
        current_statement__ = 36;
        check_less_or_equal(function__, "p[sym1__]", p[(sym1__ - 1)], 1);}
      current_statement__ = 37;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 38;
      context__.validate_dims("data initialization","x","double",
          context__.to_vec(N));
      x = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 38;
        assign(x_flat__, nil_index_list(), context__.vals_r("x"),
          "assigning variable x_flat__");
        current_statement__ = 38;
        pos__ = 1;
        current_statement__ = 38;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 38;
          assign(x, cons_list(index_uni(sym1__), nil_index_list()),
            x_flat__[(pos__ - 1)], "assigning variable x");
          current_statement__ = 38;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 39;
      validate_non_negative_index("y", "N_y", N_y);
      current_statement__ = 40;
      context__.validate_dims("data initialization","y","int",
          context__.to_vec(N_y));
      y = std::vector<int>(N_y, std::numeric_limits<int>::min());
      
      current_statement__ = 40;
      assign(y, nil_index_list(), context__.vals_i("y"),
        "assigning variable y");
      current_statement__ = 40;
      for (int sym1__ = 1; sym1__ <= N_y; ++sym1__) {
        current_statement__ = 40;
        current_statement__ = 40;
        check_greater_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 0);}
      current_statement__ = 40;
      for (int sym1__ = 1; sym1__ <= N_y; ++sym1__) {
        current_statement__ = 40;
        current_statement__ = 40;
        check_less_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 1);}
      current_statement__ = 41;
      validate_non_negative_index("belong0", "N_y", N_y);
      current_statement__ = 42;
      context__.validate_dims("data initialization","belong0","int",
          context__.to_vec(N_y));
      belong0 = std::vector<int>(N_y, std::numeric_limits<int>::min());
      
      current_statement__ = 42;
      assign(belong0, nil_index_list(), context__.vals_i("belong0"),
        "assigning variable belong0");
      current_statement__ = 43;
      validate_non_negative_index("belong1", "N_y", N_y);
      current_statement__ = 44;
      context__.validate_dims("data initialization","belong1","int",
          context__.to_vec(N_y));
      belong1 = std::vector<int>(N_y, std::numeric_limits<int>::min());
      
      current_statement__ = 44;
      assign(belong1, nil_index_list(), context__.vals_i("belong1"),
        "assigning variable belong1");
      current_statement__ = 45;
      context__.validate_dims("data initialization","theta","double",
          context__.to_vec());
      theta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 45;
      theta = context__.vals_r("theta")[(1 - 1)];
      current_statement__ = 46;
      context__.validate_dims("data initialization","tau","double",
          context__.to_vec());
      tau = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 46;
      tau = context__.vals_r("tau")[(1 - 1)];
      current_statement__ = 47;
      context__.validate_dims("data initialization","jitter","double",
          context__.to_vec());
      jitter = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 47;
      jitter = context__.vals_r("jitter")[(1 - 1)];
      current_statement__ = 48;
      validate_non_negative_index("mu", "N", N);
      current_statement__ = 49;
      context__.validate_dims("data initialization","mu","double",
          context__.to_vec(N));
      mu = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mu_flat__;
        current_statement__ = 49;
        assign(mu_flat__, nil_index_list(), context__.vals_r("mu"),
          "assigning variable mu_flat__");
        current_statement__ = 49;
        pos__ = 1;
        current_statement__ = 49;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 49;
          assign(mu, cons_list(index_uni(sym1__), nil_index_list()),
            mu_flat__[(pos__ - 1)], "assigning variable mu");
          current_statement__ = 49;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 50;
      validate_non_negative_index("diag_jitter", "N", N);
      current_statement__ = 51;
      validate_non_negative_index("diag_jitter", "N", N);
      current_statement__ = 52;
      diag_jitter = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(diag_jitter, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 53;
      assign(diag_jitter, nil_index_list(),
        diag_matrix(rep_vector(jitter, N)), "assigning variable diag_jitter");
      current_statement__ = 54;
      validate_non_negative_index("eta", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += N;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "gp_model_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ kernel_length;
      kernel_length = DUMMY_VAR__;
      
      current_statement__ = 1;
      kernel_length = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        kernel_length = stan::math::lb_constrain(kernel_length, 0, lp__);
      } else {
        current_statement__ = 1;
        kernel_length = stan::math::lb_constrain(kernel_length, 0);
      }
      local_scalar_t__ kernel_var;
      kernel_var = DUMMY_VAR__;
      
      current_statement__ = 2;
      kernel_var = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        kernel_var = stan::math::lb_constrain(kernel_var, 0, lp__);
      } else {
        current_statement__ = 2;
        kernel_var = stan::math::lb_constrain(kernel_var, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> eta;
      eta = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(eta, DUMMY_VAR__);
      
      current_statement__ = 3;
      eta = in__.vector(N);
      {
        current_statement__ = 4;
        validate_non_negative_index("seu", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> seu;
        seu = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(seu, DUMMY_VAR__);
        
        current_statement__ = 6;
        validate_non_negative_index("seu_sorted", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> seu_sorted;
        seu_sorted = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(seu_sorted, DUMMY_VAR__);
        
        current_statement__ = 8;
        validate_non_negative_index("seu0", "N_y", N_y);
        Eigen::Matrix<local_scalar_t__, -1, 1> seu0;
        seu0 = Eigen::Matrix<local_scalar_t__, -1, 1>(N_y);
        stan::math::fill(seu0, DUMMY_VAR__);
        
        current_statement__ = 10;
        validate_non_negative_index("seu1", "N_y", N_y);
        Eigen::Matrix<local_scalar_t__, -1, 1> seu1;
        seu1 = Eigen::Matrix<local_scalar_t__, -1, 1>(N_y);
        stan::math::fill(seu1, DUMMY_VAR__);
        
        current_statement__ = 12;
        validate_non_negative_index("diff_eu", "N_y", N_y);
        Eigen::Matrix<local_scalar_t__, -1, 1> diff_eu;
        diff_eu = Eigen::Matrix<local_scalar_t__, -1, 1>(N_y);
        stan::math::fill(diff_eu, DUMMY_VAR__);
        
        current_statement__ = 14;
        validate_non_negative_index("L", "N", N);
        current_statement__ = 15;
        validate_non_negative_index("L", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, -1> L;
        L = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
        stan::math::fill(L, DUMMY_VAR__);
        
        current_statement__ = 17;
        validate_non_negative_index("K", "N", N);
        current_statement__ = 18;
        validate_non_negative_index("K", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, -1> K;
        K = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
        stan::math::fill(K, DUMMY_VAR__);
        
        current_statement__ = 20;
        validate_non_negative_index("f", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> f;
        f = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(f, DUMMY_VAR__);
        
        current_statement__ = 22;
        lp_accum__.add(lognormal_lpdf<propto__>(kernel_length, 0, 10));
        current_statement__ = 23;
        lp_accum__.add(lognormal_lpdf<propto__>(kernel_var, 0, 10));
        current_statement__ = 24;
        lp_accum__.add(std_normal_lpdf<propto__>(eta));
        current_statement__ = 25;
        assign(K, nil_index_list(),
          add(gp_exp_quad_cov(to_array_1d(x), kernel_var, kernel_length),
            diag_jitter), "assigning variable K");
        current_statement__ = 26;
        assign(L, nil_index_list(), cholesky_decompose(K),
          "assigning variable L");
        current_statement__ = 27;
        assign(f, nil_index_list(), add(mu, multiply(L, eta)),
          "assigning variable f");
        current_statement__ = 28;
        assign(seu, nil_index_list(), elt_multiply(p, f),
          "assigning variable seu");
        current_statement__ = 29;
        assign(seu0, nil_index_list(),
          rvalue(seu, cons_list(index_multi(belong0), nil_index_list()),
            "seu"), "assigning variable seu0");
        current_statement__ = 30;
        assign(seu1, nil_index_list(),
          rvalue(seu, cons_list(index_multi(belong1), nil_index_list()),
            "seu"), "assigning variable seu1");
        current_statement__ = 31;
        assign(diff_eu, nil_index_list(), subtract(seu1, seu0),
          "assigning variable diff_eu");
        current_statement__ = 32;
        lp_accum__.add(
          bernoulli_logit_lpmf<propto__>(y, multiply(tau, diff_eu)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "gp_model_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double kernel_length;
      kernel_length = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      kernel_length = in__.scalar();
      current_statement__ = 1;
      kernel_length = stan::math::lb_constrain(kernel_length, 0);
      double kernel_var;
      kernel_var = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      kernel_var = in__.scalar();
      current_statement__ = 2;
      kernel_var = stan::math::lb_constrain(kernel_var, 0);
      Eigen::Matrix<double, -1, 1> eta;
      eta = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(eta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      eta = in__.vector(N);
      vars__.emplace_back(kernel_length);
      vars__.emplace_back(kernel_var);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(eta[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double kernel_length;
      kernel_length = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      kernel_length = context__.vals_r("kernel_length")[(1 - 1)];
      double kernel_length_free__;
      kernel_length_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      kernel_length_free__ = stan::math::lb_free(kernel_length, 0);
      double kernel_var;
      kernel_var = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      kernel_var = context__.vals_r("kernel_var")[(1 - 1)];
      double kernel_var_free__;
      kernel_var_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      kernel_var_free__ = stan::math::lb_free(kernel_var, 0);
      Eigen::Matrix<double, -1, 1> eta;
      eta = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(eta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> eta_flat__;
        current_statement__ = 3;
        assign(eta_flat__, nil_index_list(), context__.vals_r("eta"),
          "assigning variable eta_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 3;
          assign(eta, cons_list(index_uni(sym1__), nil_index_list()),
            eta_flat__[(pos__ - 1)], "assigning variable eta");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      vars__.emplace_back(kernel_length_free__);
      vars__.emplace_back(kernel_var_free__);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(eta[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("kernel_length");
    names__.emplace_back("kernel_var");
    names__.emplace_back("eta");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "kernel_length");
    param_names__.emplace_back(std::string() + "kernel_var");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "kernel_length");
    param_names__.emplace_back(std::string() + "kernel_var");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"kernel_length\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"kernel_var\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"kernel_length\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"kernel_var\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}
using stan_model = gp_model_model_namespace::gp_model_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return gp_model_model_namespace::profiles__;
}

#endif


