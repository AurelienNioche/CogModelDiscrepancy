
// Code generated by stanc v2.26.1
#include <stan/model/model_header.hpp>
namespace sparse_model_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 39, column 2 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 40, column 2 to column 16)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 41, column 2 to column 20)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 42, column 2 to column 26)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 45, column 2 to column 33)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 46, column 2 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 47, column 2 to column 27)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 48, column 2 to column 37)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 49, column 2 to column 97)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 50, column 2 to column 33)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 52, column 2 to column 57)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 55, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 55, column 2 to column 17)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 56, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 56, column 2 to column 17)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 57, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 57, column 2 to column 20)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 58, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 58, column 2 to column 20)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 60, column 9 to column 15)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 60, column 17 to column 23)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 60, column 2 to column 31)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 61, column 9 to column 15)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 61, column 17 to column 23)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 61, column 2 to column 36)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 62, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 62, column 12 to column 18)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 62, column 2 to column 23)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 63, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 63, column 12 to column 18)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 63, column 2 to column 23)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 65, column 2 to column 25)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 66, column 2 to column 73)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 67, column 2 to column 73)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 71, column 2 to column 41)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 72, column 2 to column 41)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 74, column 2 to column 38)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 75, column 2 to column 38)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 77, column 2 to column 40)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 78, column 2 to column 18)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 79, column 2 to column 21)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 80, column 2 to column 25)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 82, column 2 to column 40)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 20, column 2 to column 17)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 21, column 2 to column 22)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 22, column 27 to column 28)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 22, column 2 to column 33)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 23, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 23, column 2 to column 15)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 24, column 27 to column 28)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 24, column 2 to column 33)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 25, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 25, column 2 to column 15)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 26, column 31 to column 32)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 26, column 2 to column 34)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 27, column 2 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 28, column 2 to column 18)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 31, column 9 to column 15)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 31, column 2 to column 24)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 32, column 2 to column 14)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 39, column 9 to column 15)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 46, column 9 to column 15)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 47, column 9 to column 15)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 47, column 17 to column 23)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 48, column 22 to column 28)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 3, column 11 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 3, column 13 to column 14)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 3, column 4 to column 59)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 4, column 4 to column 16)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 2, column 73 to line 5, column 3)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 7, column 4 to column 28)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 6, column 28 to line 8, column 3)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 10, column 4 to column 28)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 9, column 29 to line 11, column 3)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 13, column 6 to column 29)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 12, column 24 to line 14, column 3)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 16, column 6 to column 29)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/CogModelDiscrepancy/sparse_model.stan', line 15, column 32 to line 17, column 3)"};


template <typename T2__, typename T3__, typename T4__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T2__>, T3__,
T4__>, -1, -1>
squared_exp(const int& N, const int& P, const T2__& dist_mat_arg__,
            const T3__& l, const T4__& sigmasq, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T2__>,
          T3__,
          T4__>;
  const auto& dist_mat = to_ref(dist_mat_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 66;
    validate_non_negative_index("ret", "N", N);
    current_statement__ = 67;
    validate_non_negative_index("ret", "P", P);
    Eigen::Matrix<local_scalar_t__, -1, -1> ret;
    ret = Eigen::Matrix<local_scalar_t__, -1, -1>(N, P);
    stan::math::fill(ret, DUMMY_VAR__);
    
    current_statement__ = 68;
    assign(ret, nil_index_list(),
      multiply(sigmasq,
        stan::math::exp(divide(multiply(-0.5, dist_mat), pow(l, 2)))),
      "assigning variable ret");
    current_statement__ = 69;
    return ret;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct squared_exp_functor__ {
template <typename T2__, typename T3__, typename T4__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T2__>, T3__,
T4__>, -1, -1>
operator()(const int& N, const int& P, const T2__& dist_mat, const T3__& l,
           const T4__& sigmasq, std::ostream* pstream__)  const 
{
return squared_exp(N, P, dist_mat, l, sigmasq, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T1__>, -1, 1>
M(const T0__& x_arg__, const T1__& b, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__>;
  const auto& x = to_ref(x_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 71;
    return subtract(1, stan::math::exp(multiply(-b, x)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct M_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T1__>, -1, 1>
operator()(const T0__& x, const T1__& b, std::ostream* pstream__)  const 
{
return M(x, b, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
M_real(const T0__& x, const T1__& b, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 73;
    return (1 - stan::math::exp((-b * x)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct M_real_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& x, const T1__& b, std::ostream* pstream__)  const 
{
return M_real(x, b, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
softplus(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 75;
    return stan::math::log((1 + stan::math::exp(x)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct softplus_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return softplus(x, pstream__);
}
};

template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
softplus_vec(const T0__& x_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& x = to_ref(x_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 77;
    return stan::math::log(add(1, stan::math::exp(x)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct softplus_vec_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return softplus_vec(x, pstream__);
}
};

class sparse_model_model final : public model_base_crtp<sparse_model_model> {

 private:
  int N;
  int N_eval;
  Eigen::Matrix<double, -1, 1> p0;
  Eigen::Matrix<double, -1, 1> x0;
  Eigen::Matrix<double, -1, 1> p1;
  Eigen::Matrix<double, -1, 1> x1;
  std::vector<int> chose1;
  double prior_shape;
  double prior_rate;
  Eigen::Matrix<double, -1, 1> x_eval;
  double jitter;
 
 public:
  ~sparse_model_model() { }
  
  inline std::string model_name() const final { return "sparse_model_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1", "stancflags = "};
  }
  
  
  sparse_model_model(stan::io::var_context& context__,
                     unsigned int random_seed__ = 0,
                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "sparse_model_model_namespace::sparse_model_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 44;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 44;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 44;
      current_statement__ = 44;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 45;
      context__.validate_dims("data initialization","N_eval","int",
          context__.to_vec());
      N_eval = std::numeric_limits<int>::min();
      
      current_statement__ = 45;
      N_eval = context__.vals_i("N_eval")[(1 - 1)];
      current_statement__ = 45;
      current_statement__ = 45;
      check_greater_or_equal(function__, "N_eval", N_eval, 0);
      current_statement__ = 46;
      validate_non_negative_index("p0", "N", N);
      current_statement__ = 47;
      context__.validate_dims("data initialization","p0","double",
          context__.to_vec(N));
      p0 = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(p0, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> p0_flat__;
        current_statement__ = 47;
        assign(p0_flat__, nil_index_list(), context__.vals_r("p0"),
          "assigning variable p0_flat__");
        current_statement__ = 47;
        pos__ = 1;
        current_statement__ = 47;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 47;
          assign(p0, cons_list(index_uni(sym1__), nil_index_list()),
            p0_flat__[(pos__ - 1)], "assigning variable p0");
          current_statement__ = 47;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 47;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 47;
        current_statement__ = 47;
        check_greater_or_equal(function__, "p0[sym1__]", p0[(sym1__ - 1)], 0);
      }
      current_statement__ = 47;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 47;
        current_statement__ = 47;
        check_less_or_equal(function__, "p0[sym1__]", p0[(sym1__ - 1)], 1);}
      current_statement__ = 48;
      validate_non_negative_index("x0", "N", N);
      current_statement__ = 49;
      context__.validate_dims("data initialization","x0","double",
          context__.to_vec(N));
      x0 = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(x0, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x0_flat__;
        current_statement__ = 49;
        assign(x0_flat__, nil_index_list(), context__.vals_r("x0"),
          "assigning variable x0_flat__");
        current_statement__ = 49;
        pos__ = 1;
        current_statement__ = 49;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 49;
          assign(x0, cons_list(index_uni(sym1__), nil_index_list()),
            x0_flat__[(pos__ - 1)], "assigning variable x0");
          current_statement__ = 49;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 50;
      validate_non_negative_index("p1", "N", N);
      current_statement__ = 51;
      context__.validate_dims("data initialization","p1","double",
          context__.to_vec(N));
      p1 = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(p1, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> p1_flat__;
        current_statement__ = 51;
        assign(p1_flat__, nil_index_list(), context__.vals_r("p1"),
          "assigning variable p1_flat__");
        current_statement__ = 51;
        pos__ = 1;
        current_statement__ = 51;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 51;
          assign(p1, cons_list(index_uni(sym1__), nil_index_list()),
            p1_flat__[(pos__ - 1)], "assigning variable p1");
          current_statement__ = 51;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 51;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 51;
        current_statement__ = 51;
        check_greater_or_equal(function__, "p1[sym1__]", p1[(sym1__ - 1)], 0);
      }
      current_statement__ = 51;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 51;
        current_statement__ = 51;
        check_less_or_equal(function__, "p1[sym1__]", p1[(sym1__ - 1)], 1);}
      current_statement__ = 52;
      validate_non_negative_index("x1", "N", N);
      current_statement__ = 53;
      context__.validate_dims("data initialization","x1","double",
          context__.to_vec(N));
      x1 = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(x1, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x1_flat__;
        current_statement__ = 53;
        assign(x1_flat__, nil_index_list(), context__.vals_r("x1"),
          "assigning variable x1_flat__");
        current_statement__ = 53;
        pos__ = 1;
        current_statement__ = 53;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 53;
          assign(x1, cons_list(index_uni(sym1__), nil_index_list()),
            x1_flat__[(pos__ - 1)], "assigning variable x1");
          current_statement__ = 53;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 54;
      validate_non_negative_index("chose1", "N", N);
      current_statement__ = 55;
      context__.validate_dims("data initialization","chose1","int",
          context__.to_vec(N));
      chose1 = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 55;
      assign(chose1, nil_index_list(), context__.vals_i("chose1"),
        "assigning variable chose1");
      current_statement__ = 55;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 55;
        current_statement__ = 55;
        check_greater_or_equal(function__, "chose1[sym1__]",
                               chose1[(sym1__ - 1)], 0);}
      current_statement__ = 55;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 55;
        current_statement__ = 55;
        check_less_or_equal(function__, "chose1[sym1__]",
                            chose1[(sym1__ - 1)], 1);}
      current_statement__ = 56;
      context__.validate_dims("data initialization","prior_shape","double",
          context__.to_vec());
      prior_shape = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 56;
      prior_shape = context__.vals_r("prior_shape")[(1 - 1)];
      current_statement__ = 57;
      context__.validate_dims("data initialization","prior_rate","double",
          context__.to_vec());
      prior_rate = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 57;
      prior_rate = context__.vals_r("prior_rate")[(1 - 1)];
      current_statement__ = 58;
      validate_non_negative_index("x_eval", "N_eval", N_eval);
      current_statement__ = 59;
      context__.validate_dims("data initialization","x_eval","double",
          context__.to_vec(N_eval));
      x_eval = Eigen::Matrix<double, -1, 1>(N_eval);
      stan::math::fill(x_eval, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_eval_flat__;
        current_statement__ = 59;
        assign(x_eval_flat__, nil_index_list(), context__.vals_r("x_eval"),
          "assigning variable x_eval_flat__");
        current_statement__ = 59;
        pos__ = 1;
        current_statement__ = 59;
        for (int sym1__ = 1; sym1__ <= N_eval; ++sym1__) {
          current_statement__ = 59;
          assign(x_eval, cons_list(index_uni(sym1__), nil_index_list()),
            x_eval_flat__[(pos__ - 1)], "assigning variable x_eval");
          current_statement__ = 59;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 60;
      context__.validate_dims("data initialization","jitter","double",
          context__.to_vec());
      jitter = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 60;
      jitter = context__.vals_r("jitter")[(1 - 1)];
      current_statement__ = 61;
      validate_non_negative_index("z", "N_eval", N_eval);
      current_statement__ = 62;
      validate_non_negative_index("r", "N_eval", N_eval);
      current_statement__ = 63;
      validate_non_negative_index("K", "N_eval", N_eval);
      current_statement__ = 64;
      validate_non_negative_index("K", "N_eval", N_eval);
      current_statement__ = 65;
      validate_non_negative_index("K_chol", "N_eval", N_eval);
      current_statement__ = 65;
      validate_non_negative_index("K_chol", "N_eval", N_eval);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += N_eval;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "sparse_model_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> z;
      z = Eigen::Matrix<local_scalar_t__, -1, 1>(N_eval);
      stan::math::fill(z, DUMMY_VAR__);
      
      current_statement__ = 1;
      z = in__.vector(N_eval);
      local_scalar_t__ beta_unc;
      beta_unc = DUMMY_VAR__;
      
      current_statement__ = 2;
      beta_unc = in__.scalar();
      local_scalar_t__ l;
      l = DUMMY_VAR__;
      
      current_statement__ = 3;
      l = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        l = stan::math::lb_constrain(l, 0, lp__);
      } else {
        current_statement__ = 3;
        l = stan::math::lb_constrain(l, 0);
      }
      local_scalar_t__ sigmasq;
      sigmasq = DUMMY_VAR__;
      
      current_statement__ = 4;
      sigmasq = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        sigmasq = stan::math::lb_constrain(sigmasq, 0, lp__);
      } else {
        current_statement__ = 4;
        sigmasq = stan::math::lb_constrain(sigmasq, 0);
      }
      local_scalar_t__ beta;
      beta = DUMMY_VAR__;
      
      current_statement__ = 5;
      beta = softplus(beta_unc, pstream__);
      Eigen::Matrix<local_scalar_t__, -1, 1> r;
      r = Eigen::Matrix<local_scalar_t__, -1, 1>(N_eval);
      stan::math::fill(r, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> K;
      K = Eigen::Matrix<local_scalar_t__, -1, -1>(N_eval, N_eval);
      stan::math::fill(K, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> K_chol;
      K_chol = Eigen::Matrix<local_scalar_t__, -1, -1>(N_eval, N_eval);
      stan::math::fill(K_chol, DUMMY_VAR__);
      
      current_statement__ = 9;
      assign(K, nil_index_list(),
        add(gp_exp_quad_cov(to_array_1d(x_eval), sigmasq, l),
          diag_matrix(rep_vector(jitter, N_eval))), "assigning variable K");
      current_statement__ = 10;
      assign(K_chol, nil_index_list(), cholesky_decompose(K),
        "assigning variable K_chol");
      current_statement__ = 11;
      assign(r, nil_index_list(),
        softplus_vec(
          add(multiply(K_chol, z), rep_vector(0.5, N_eval)), pstream__),
        "assigning variable r");
      current_statement__ = 8;
      current_statement__ = 8;
      check_cholesky_factor(function__, "K_chol", K_chol);
      {
        current_statement__ = 12;
        validate_non_negative_index("seu0", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> seu0;
        seu0 = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(seu0, DUMMY_VAR__);
        
        current_statement__ = 14;
        validate_non_negative_index("seu1", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> seu1;
        seu1 = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(seu1, DUMMY_VAR__);
        
        current_statement__ = 16;
        validate_non_negative_index("r0_pred", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> r0_pred;
        r0_pred = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(r0_pred, DUMMY_VAR__);
        
        current_statement__ = 18;
        validate_non_negative_index("r1_pred", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> r1_pred;
        r1_pred = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(r1_pred, DUMMY_VAR__);
        
        current_statement__ = 20;
        validate_non_negative_index("K_inv", "N_eval", N_eval);
        current_statement__ = 21;
        validate_non_negative_index("K_inv", "N_eval", N_eval);
        Eigen::Matrix<local_scalar_t__, -1, -1> K_inv;
        K_inv = Eigen::Matrix<local_scalar_t__, -1, -1>(N_eval, N_eval);
        stan::math::fill(K_inv, DUMMY_VAR__);
        
        current_statement__ = 23;
        validate_non_negative_index("K_chol_inv", "N_eval", N_eval);
        current_statement__ = 24;
        validate_non_negative_index("K_chol_inv", "N_eval", N_eval);
        Eigen::Matrix<local_scalar_t__, -1, -1> K_chol_inv;
        K_chol_inv = Eigen::Matrix<local_scalar_t__, -1, -1>(N_eval, N_eval);
        stan::math::fill(K_chol_inv, DUMMY_VAR__);
        
        current_statement__ = 26;
        validate_non_negative_index("K0", "N", N);
        current_statement__ = 27;
        validate_non_negative_index("K0", "N_eval", N_eval);
        Eigen::Matrix<local_scalar_t__, -1, -1> K0;
        K0 = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N_eval);
        stan::math::fill(K0, DUMMY_VAR__);
        
        current_statement__ = 29;
        validate_non_negative_index("K1", "N", N);
        current_statement__ = 30;
        validate_non_negative_index("K1", "N_eval", N_eval);
        Eigen::Matrix<local_scalar_t__, -1, -1> K1;
        K1 = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N_eval);
        stan::math::fill(K1, DUMMY_VAR__);
        
        current_statement__ = 32;
        assign(K_inv, nil_index_list(), inverse_spd(K),
          "assigning variable K_inv");
        current_statement__ = 33;
        assign(K0, nil_index_list(),
          gp_exp_quad_cov(to_array_1d(x0), to_array_1d(x_eval), sigmasq, l),
          "assigning variable K0");
        current_statement__ = 34;
        assign(K1, nil_index_list(),
          gp_exp_quad_cov(to_array_1d(x1), to_array_1d(x_eval), sigmasq, l),
          "assigning variable K1");
        current_statement__ = 35;
        assign(r0_pred, nil_index_list(),
          add(1.0, multiply(multiply(K0, K_inv), subtract(r, 1.0))),
          "assigning variable r0_pred");
        current_statement__ = 36;
        assign(r1_pred, nil_index_list(),
          add(1.0, multiply(multiply(K1, K_inv), subtract(r, 1.0))),
          "assigning variable r1_pred");
        current_statement__ = 37;
        assign(seu0, nil_index_list(),
          elt_multiply(elt_multiply(p0, M(x0, beta, pstream__)), r0_pred),
          "assigning variable seu0");
        current_statement__ = 38;
        assign(seu1, nil_index_list(),
          elt_multiply(elt_multiply(p1, M(x1, beta, pstream__)), r1_pred),
          "assigning variable seu1");
        current_statement__ = 39;
        lp_accum__.add(gamma_lpdf<propto__>(beta, prior_shape, prior_rate));
        current_statement__ = 40;
        lp_accum__.add(normal_lpdf<propto__>(z, 0, 1));
        current_statement__ = 41;
        lp_accum__.add(inv_gamma_lpdf<propto__>(l, 5, 6));
        current_statement__ = 42;
        lp_accum__.add(normal_lpdf<propto__>(sigmasq, 0, 2));
        current_statement__ = 43;
        lp_accum__.add(
          bernoulli_logit_lpmf<propto__>(chose1, subtract(seu1, seu0)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "sparse_model_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      Eigen::Matrix<double, -1, 1> z;
      z = Eigen::Matrix<double, -1, 1>(N_eval);
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      z = in__.vector(N_eval);
      double beta_unc;
      beta_unc = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      beta_unc = in__.scalar();
      double l;
      l = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      l = in__.scalar();
      current_statement__ = 3;
      l = stan::math::lb_constrain(l, 0);
      double sigmasq;
      sigmasq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigmasq = in__.scalar();
      current_statement__ = 4;
      sigmasq = stan::math::lb_constrain(sigmasq, 0);
      double beta;
      beta = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> r;
      r = Eigen::Matrix<double, -1, 1>(N_eval);
      stan::math::fill(r, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> K;
      K = Eigen::Matrix<double, -1, -1>(N_eval, N_eval);
      stan::math::fill(K, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> K_chol;
      K_chol = Eigen::Matrix<double, -1, -1>(N_eval, N_eval);
      stan::math::fill(K_chol, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= N_eval; ++sym1__) {
        vars__.emplace_back(z[(sym1__ - 1)]);}
      vars__.emplace_back(beta_unc);
      vars__.emplace_back(l);
      vars__.emplace_back(sigmasq);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 5;
      beta = softplus(beta_unc, pstream__);
      current_statement__ = 9;
      assign(K, nil_index_list(),
        add(gp_exp_quad_cov(to_array_1d(x_eval), sigmasq, l),
          diag_matrix(rep_vector(jitter, N_eval))), "assigning variable K");
      current_statement__ = 10;
      assign(K_chol, nil_index_list(), cholesky_decompose(K),
        "assigning variable K_chol");
      current_statement__ = 11;
      assign(r, nil_index_list(),
        softplus_vec(
          add(multiply(K_chol, z), rep_vector(0.5, N_eval)), pstream__),
        "assigning variable r");
      current_statement__ = 8;
      current_statement__ = 8;
      check_cholesky_factor(function__, "K_chol", K_chol);
      if (emit_transformed_parameters__) {
        vars__.emplace_back(beta);
        for (int sym1__ = 1; sym1__ <= N_eval; ++sym1__) {
          vars__.emplace_back(r[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N_eval; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_eval; ++sym2__) {
            vars__.emplace_back(
              rvalue(K,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "K"));}}
        for (int sym1__ = 1; sym1__ <= N_eval; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_eval; ++sym2__) {
            vars__.emplace_back(
              rvalue(K_chol,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "K_chol"));
          }}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> z;
      z = Eigen::Matrix<double, -1, 1>(N_eval);
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_flat__;
        current_statement__ = 1;
        assign(z_flat__, nil_index_list(), context__.vals_r("z"),
          "assigning variable z_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= N_eval; ++sym1__) {
          current_statement__ = 1;
          assign(z, cons_list(index_uni(sym1__), nil_index_list()),
            z_flat__[(pos__ - 1)], "assigning variable z");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      double beta_unc;
      beta_unc = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      beta_unc = context__.vals_r("beta_unc")[(1 - 1)];
      double l;
      l = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      l = context__.vals_r("l")[(1 - 1)];
      double l_free__;
      l_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      l_free__ = stan::math::lb_free(l, 0);
      double sigmasq;
      sigmasq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigmasq = context__.vals_r("sigmasq")[(1 - 1)];
      double sigmasq_free__;
      sigmasq_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigmasq_free__ = stan::math::lb_free(sigmasq, 0);
      for (int sym1__ = 1; sym1__ <= N_eval; ++sym1__) {
        vars__.emplace_back(z[(sym1__ - 1)]);}
      vars__.emplace_back(beta_unc);
      vars__.emplace_back(l_free__);
      vars__.emplace_back(sigmasq_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("z");
    names__.emplace_back("beta_unc");
    names__.emplace_back("l");
    names__.emplace_back("sigmasq");
    names__.emplace_back("beta");
    names__.emplace_back("r");
    names__.emplace_back("K");
    names__.emplace_back("K_chol");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_eval)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_eval)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_eval),
                                             static_cast<size_t>(N_eval)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_eval),
                                             static_cast<size_t>(N_eval)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_eval; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "beta_unc");
    param_names__.emplace_back(std::string() + "l");
    param_names__.emplace_back(std::string() + "sigmasq");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "beta");
      for (int sym1__ = 1; sym1__ <= N_eval; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_eval; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_eval; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "K" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N_eval; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_eval; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "K_chol" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_eval; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "beta_unc");
    param_names__.emplace_back(std::string() + "l");
    param_names__.emplace_back(std::string() + "sigmasq");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "beta");
      for (int sym1__ = 1; sym1__ <= N_eval; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_eval; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_eval; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "K" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1;
           sym1__ <= ((((N_eval * (N_eval - 1)) / 2) + N_eval) +
                       ((N_eval - N_eval) * N_eval)); ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "K_chol" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"z\",\"type\":{\"name\":\"vector\",\"length\":" << N_eval << "},\"block\":\"parameters\"},{\"name\":\"beta_unc\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"l\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigmasq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"r\",\"type\":{\"name\":\"vector\",\"length\":" << N_eval << "},\"block\":\"transformed_parameters\"},{\"name\":\"K\",\"type\":{\"name\":\"matrix\",\"rows\":" << N_eval << ",\"cols\":" << N_eval << "},\"block\":\"transformed_parameters\"},{\"name\":\"K_chol\",\"type\":{\"name\":\"matrix\",\"rows\":" << N_eval << ",\"cols\":" << N_eval << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"z\",\"type\":{\"name\":\"vector\",\"length\":" << N_eval << "},\"block\":\"parameters\"},{\"name\":\"beta_unc\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"l\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigmasq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"r\",\"type\":{\"name\":\"vector\",\"length\":" << N_eval << "},\"block\":\"transformed_parameters\"},{\"name\":\"K\",\"type\":{\"name\":\"matrix\",\"rows\":" << N_eval << ",\"cols\":" << N_eval << "},\"block\":\"transformed_parameters\"},{\"name\":\"K_chol\",\"type\":{\"name\":\"vector\",\"length\":" << ((((N_eval * (N_eval - 1)) / 2) + N_eval) + ((N_eval - N_eval) * N_eval)) << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}
using stan_model = sparse_model_model_namespace::sparse_model_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return sparse_model_model_namespace::profiles__;
}

#endif


